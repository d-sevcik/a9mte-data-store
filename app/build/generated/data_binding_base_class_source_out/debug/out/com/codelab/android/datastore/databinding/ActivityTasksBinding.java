// Generated by view binder compiler. Do not edit!
package com.codelab.android.datastore.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.codelab.android.datastore.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTasksBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout filter;

  @NonNull
  public final RecyclerView list;

  @NonNull
  public final TextView showCompleted;

  @NonNull
  public final SwitchMaterial showCompletedSwitch;

  @NonNull
  public final LinearLayout sort;

  @NonNull
  public final Chip sortDeadline;

  @NonNull
  public final Chip sortPriority;

  @NonNull
  public final TextView startCounterTextView;

  private ActivityTasksBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout filter,
      @NonNull RecyclerView list, @NonNull TextView showCompleted,
      @NonNull SwitchMaterial showCompletedSwitch, @NonNull LinearLayout sort,
      @NonNull Chip sortDeadline, @NonNull Chip sortPriority,
      @NonNull TextView startCounterTextView) {
    this.rootView = rootView;
    this.filter = filter;
    this.list = list;
    this.showCompleted = showCompleted;
    this.showCompletedSwitch = showCompletedSwitch;
    this.sort = sort;
    this.sortDeadline = sortDeadline;
    this.sortPriority = sortPriority;
    this.startCounterTextView = startCounterTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTasksBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTasksBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_tasks, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTasksBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.filter;
      LinearLayout filter = rootView.findViewById(id);
      if (filter == null) {
        break missingId;
      }

      id = R.id.list;
      RecyclerView list = rootView.findViewById(id);
      if (list == null) {
        break missingId;
      }

      id = R.id.show_completed;
      TextView showCompleted = rootView.findViewById(id);
      if (showCompleted == null) {
        break missingId;
      }

      id = R.id.show_completed_switch;
      SwitchMaterial showCompletedSwitch = rootView.findViewById(id);
      if (showCompletedSwitch == null) {
        break missingId;
      }

      id = R.id.sort;
      LinearLayout sort = rootView.findViewById(id);
      if (sort == null) {
        break missingId;
      }

      id = R.id.sort_deadline;
      Chip sortDeadline = rootView.findViewById(id);
      if (sortDeadline == null) {
        break missingId;
      }

      id = R.id.sort_priority;
      Chip sortPriority = rootView.findViewById(id);
      if (sortPriority == null) {
        break missingId;
      }

      id = R.id.startCounterTextView;
      TextView startCounterTextView = rootView.findViewById(id);
      if (startCounterTextView == null) {
        break missingId;
      }

      return new ActivityTasksBinding((ConstraintLayout) rootView, filter, list, showCompleted,
          showCompletedSwitch, sort, sortDeadline, sortPriority, startCounterTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
