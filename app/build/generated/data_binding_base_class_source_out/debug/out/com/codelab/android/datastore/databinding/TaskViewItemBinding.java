// Generated by view binder compiler. Do not edit!
package com.codelab.android.datastore.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.codelab.android.datastore.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TaskViewItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView deadline;

  @NonNull
  public final TextView priority;

  @NonNull
  public final TextView task;

  private TaskViewItemBinding(@NonNull ConstraintLayout rootView, @NonNull TextView deadline,
      @NonNull TextView priority, @NonNull TextView task) {
    this.rootView = rootView;
    this.deadline = deadline;
    this.priority = priority;
    this.task = task;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TaskViewItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TaskViewItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.task_view_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TaskViewItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deadline;
      TextView deadline = rootView.findViewById(id);
      if (deadline == null) {
        break missingId;
      }

      id = R.id.priority;
      TextView priority = rootView.findViewById(id);
      if (priority == null) {
        break missingId;
      }

      id = R.id.task;
      TextView task = rootView.findViewById(id);
      if (task == null) {
        break missingId;
      }

      return new TaskViewItemBinding((ConstraintLayout) rootView, deadline, priority, task);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
